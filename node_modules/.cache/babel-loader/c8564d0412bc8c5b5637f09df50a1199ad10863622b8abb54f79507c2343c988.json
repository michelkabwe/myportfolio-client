{"ast":null,"code":"var _jsxFileName = \"/Users/Michelka/Documents/portfolio/frontend/src/hooks/usePostListContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CategoriesContext = /*#__PURE__*/createContext(undefined);\nexport const useCategoriesContext = () => {\n  _s();\n  const context = useContext(CategoriesContext);\n  if (!context) {\n    throw new Error('useCategoriesContext must be used within a CategoriesProvider');\n  }\n  return context;\n};\n_s(useCategoriesContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const CategoriesProvider = ({\n  children\n}) => {\n  _s2();\n  const [posts, setPosts] = useState([]);\n  const fetchPosts = async () => {\n    try {\n      const response = await axios.get('http://localhost:3001/api/posts/');\n      setPosts(response.data);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n  useEffect(() => {\n    fetchPosts();\n  }, []);\n  const [deletePost, setDeletePost] = useState(posts);\n  const handleDeletePost = async id => {\n    try {\n      await axios.delete(`http://localhost:3001/api/posts/${id}`);\n      const updatedPosts = posts.filter(post => post.id !== id);\n      setDeletePost(updatedPosts);\n    } catch (error) {\n      console.error('Error deleting post:', error);\n    }\n  };\n  const contextValue = {\n    posts,\n    deletePost,\n    handleDeletePost\n  };\n  return /*#__PURE__*/_jsxDEV(CategoriesContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n};\n_s2(CategoriesProvider, \"wYWWtBqGwZoYEnM/Cqvz2+jgHts=\");\n_c = CategoriesProvider;\nvar _c;\n$RefreshReg$(_c, \"CategoriesProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","axios","jsxDEV","_jsxDEV","CategoriesContext","undefined","useCategoriesContext","_s","context","Error","CategoriesProvider","children","_s2","posts","setPosts","fetchPosts","response","get","data","error","console","deletePost","setDeletePost","handleDeletePost","id","delete","updatedPosts","filter","post","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/Michelka/Documents/portfolio/frontend/src/hooks/usePostListContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\nimport axios from 'axios';\n\ninterface CategoriesProviderProps {\n    children: ReactNode;\n}\n\ninterface Category {\n    id: number;\n    category_id: string;\n    content: string;\n    title: string;\n    imageUrl: string;\n}\n\ninterface ContextValue {\n    posts: Category[];\n    handleDeletePost: (id: number) => void;\n    deletePost:any;\n}\n\nconst CategoriesContext = createContext<ContextValue | undefined>(undefined);\n\nexport const useCategoriesContext = (): ContextValue => {\n    const context = useContext(CategoriesContext);\n    if (!context) {\n        throw new Error('useCategoriesContext must be used within a CategoriesProvider');\n    }\n    return context;\n};\n\nexport const CategoriesProvider: React.FC<CategoriesProviderProps> = ({ children }) => {\n    const [posts, setPosts] = useState<Category[]>([]);\n\n    const fetchPosts = async () => {\n        try {\n            const response = await axios.get<Category[]>('http://localhost:3001/api/posts/');\n            setPosts(response.data);\n        } catch (error) {\n            console.error('Error fetching data:', error);\n        }\n    };\n\n\n\n    useEffect(() => {\n        fetchPosts();\n    }, []);\n\n    const [deletePost, setDeletePost] = useState(posts);\n\n    const handleDeletePost = async (id: number) => {\n        try {\n            await axios.delete(`http://localhost:3001/api/posts/${id}`);\n            const updatedPosts = posts.filter(post => post.id !== id);\n             setDeletePost(updatedPosts);\n        } catch (error) {\n            console.error('Error deleting post:', error);\n        }\n    };\n\n    const contextValue: ContextValue = {\n        posts,\n        deletePost,\n        handleDeletePost,\n    };\n\n    return (\n        <CategoriesContext.Provider value={contextValue}>\n            {children}\n        </CategoriesContext.Provider>\n    );\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAmB,OAAO;AACxF,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAoB1B,MAAMC,iBAAiB,gBAAGP,aAAa,CAA2BQ,SAAS,CAAC;AAE5E,OAAO,MAAMC,oBAAoB,GAAGA,CAAA,KAAoB;EAAAC,EAAA;EACpD,MAAMC,OAAO,GAAGV,UAAU,CAACM,iBAAiB,CAAC;EAC7C,IAAI,CAACI,OAAO,EAAE;IACV,MAAM,IAAIC,KAAK,CAAC,+DAA+D,CAAC;EACpF;EACA,OAAOD,OAAO;AAClB,CAAC;AAACD,EAAA,CANWD,oBAAoB;AAQjC,OAAO,MAAMI,kBAAqD,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EACnF,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAa,EAAE,CAAC;EAElD,MAAMe,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC3B,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMf,KAAK,CAACgB,GAAG,CAAa,kCAAkC,CAAC;MAChFH,QAAQ,CAACE,QAAQ,CAACE,IAAI,CAAC;IAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAChD;EACJ,CAAC;EAIDpB,SAAS,CAAC,MAAM;IACZgB,UAAU,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAM,CAACM,UAAU,EAAEC,aAAa,CAAC,GAAGtB,QAAQ,CAACa,KAAK,CAAC;EAEnD,MAAMU,gBAAgB,GAAG,MAAOC,EAAU,IAAK;IAC3C,IAAI;MACA,MAAMvB,KAAK,CAACwB,MAAM,CAAE,mCAAkCD,EAAG,EAAC,CAAC;MAC3D,MAAME,YAAY,GAAGb,KAAK,CAACc,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACJ,EAAE,KAAKA,EAAE,CAAC;MACxDF,aAAa,CAACI,YAAY,CAAC;IAChC,CAAC,CAAC,OAAOP,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAChD;EACJ,CAAC;EAED,MAAMU,YAA0B,GAAG;IAC/BhB,KAAK;IACLQ,UAAU;IACVE;EACJ,CAAC;EAED,oBACIpB,OAAA,CAACC,iBAAiB,CAAC0B,QAAQ;IAACC,KAAK,EAAEF,YAAa;IAAAlB,QAAA,EAC3CA;EAAQ;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAErC,CAAC;AAACvB,GAAA,CAzCWF,kBAAqD;AAAA0B,EAAA,GAArD1B,kBAAqD;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}